% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runAppWithParams.R
\name{runAppWithParams}
\alias{runAppWithParams}
\alias{get_shiny_parameter}
\title{This is a wrapper to shiny::runApp to include parameters.}
\usage{
runAppWithParams(ui, server, ...)

get_shiny_parameter(param, type_check)
}
\arguments{
\item{ui}{the Shiny ui object.}

\item{server}{the Shiny server object.}

\item{...}{[shiny::runApp()] parameters, [shiny::shinyApp()] parameters,
or parameters to pass to the Shiny app.}

\item{param}{the parameter name.}

\item{type_check}{an `is.` function (e.g. `is.numeric`) to test the parameter type.}
}
\description{
This function will run a Shiny app but will pass arbitrary parameters
(`NAME = VALUE`) through the `...` parameter to the application. This
is done by modifying the Shiny UI and server function environments.

This function will traverse up the environment tree looking for the given parameter. Optionally,
if `type_check` is set to an `is.` type function (e.g. `is.numeric`, `is.list`, etc.) it will
check the object type. If the object is not found or the type doesn't match it will throw an
error.
}
\examples{
if (interactive()) { # Only run this example in interactive R sessions
library(ShinyDemo)
data(mtcars)
data(faithful)
runAppWithParams(ui = ShinyDemo::df_viewer_ui,
                 server = ShinyDemo::df_viewer_server,
                 data_frames = list(mtcars = mtcars, faithful = faithful),
                 port = 2112)
}
}
